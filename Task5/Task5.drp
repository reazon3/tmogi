program SIAOD;

{Многочлен с целыми коэффициентами можно представить в виде списка. При этом, если a(i) = 0 , 
то соответствующий элемент не включается в список
Необходимо: описать тип данных, соответствующий предложенному
представлению многочленов, разработать следующие функции и процедуры
для работы с этими списками-многочленами:
– логическую функцию Equality(p,q), проверяющую равенство многочленов p и q;
– функцию Meaning(p,x), вычисляющую значение многочлена в целочис-
ленной точке х;
– процедуру Add(p,q,r) вычисления суммы многочленов q и r, результат - многочлен p.}
{$APPTYPE CONSOLE}

uses
  System.SysUtils;

type
  pt = ^elem;
  elem = record
    power : integer;
    koef : integer;
    next : pt;
  end;

var
  ptStart1, ptEnd1, ptStart2, ptEnd2, ptStart3, ptEnd3, test : pt;

procedure NewEL(var ptr : pt);
begin
  if ptr = nil then
  begin
    New(ptr);
    Exit;
  end;

  new(ptr^.next);
  ptr := ptr^.next;
  ptr^.power := 0;
  ptr^.koef := 0;
  ptr^.next := nil;
end;

procedure Clear(ptr : pt);
var
  temp, start : pt;
  counter : Integer;
begin
  counter := 1;
  start := ptr;
  temp := ptr;
  while (ptr <> nil) do
  begin
    if counter = 1 then
      if (ptr.koef = 0) then
      begin
        ptr := ptr.next;
        Dispose(temp);
        temp := ptr;
        start := ptr;
        Continue;
      end;

    if ((ptr^.koef = 0) and (counter <> 1)) then
    begin
      temp^.next := ptr^.next;
      Dispose(ptr);
      ptr := temp^.next;
      continue;
    end;

    if counter <> 1 then
      temp := ptr;
    if ptr <> nil then
      ptr := ptr^.next;
    inc(counter);
  end;
  ptr := start;
end;

procedure Show(ptr : pt);
var
  temp : pt;
begin
  temp := ptr;
  while (temp <> nil) do
  begin
    if ((temp^.koef < 0) and (temp^.power <> 0)) then
      Write(temp^.koef, 'x^', temp^.power);

    if ((temp^.koef > 0) and (temp^.power <> 0)) then
      Write(' +',temp^.koef, 'x^', temp^.power);

    if (temp^.power = 0) and (temp^.koef > 0) then
      Write(' +', temp^.koef);

    if (temp^.power = 0) and (temp^.koef < 0) then
      Write(' ', temp^.koef);

    temp := temp^.next;
  end;
end;

procedure Input(var ptrS, ptrE : pt);
var
  size, i : integer;
begin
  Write('enter power : ');
  Readln(size);
  inc(size);
  for i := 1 to size do
  begin
    if ptrS = nil then
    begin
       NewEL(ptrE);
       ptrS := ptrE;
    end
    else
      NewEL(ptrE);
    ptrE^.power := size - i;
    Write('koef : ');
    Readln(ptrE^.koef);
  end;
end;

function Equa(ptr1, ptr2 : pt) : Boolean;
var
  temp1, temp2 : pt;
begin
  temp1 := ptr1;
  temp2 := ptr2;
  Result := false;
  while (temp1 <> nil) or (temp2 <> nil) do
  begin
    if (temp1^.power <> temp2^.power) or (temp1^.koef <> temp2^.koef) then
      exit;
    temp1 := temp1^.next;
    temp2 := temp2^.next;
  end;
  if (temp1 = nil) and (temp2 = nil) then
    Result := true;
end;

function Meaning(ptr : pt; x : Integer) : Integer;
var
  temp, i : integer;
begin
  result := 0;
  while ptr <> nil do
  begin
    temp := 1;
    for i := 1 to ptr^.power do
      temp := temp * x;
    Result := Result + temp * ptr^.koef;
    ptr := ptr^.next;
  end;
end;

procedure Summa();
var
  temp1, temp2, temp3 : pt;
  flag : Boolean;
begin
  temp1 := ptStart1;
  temp2 := ptStart2;
  
  while temp1 <> nil do
  begin
    if ptStart3 = nil then
    begin
       NewEL(ptEnd3);
       ptStart3 := ptEnd3;
    end
    else
      NewEL(ptEnd3);
    ptEnd3^.power := temp1^.power;
    ptEnd3^.koef := temp1^.koef;
    temp1 := temp1^.next;  
  end;

  while temp2 <> nil do
  begin
    temp3 := ptStart3;
    flag := true;  
    while (temp3 <> nil) do
    begin
      if temp3^.power = temp2^.power then
      begin
        temp3^.koef := temp3^.koef + temp2^.koef;   
        flag := false;
      end;
      temp3 := temp3^.next;
    end;

    if flag then
    begin
      NewEL(ptEnd3);
      ptEnd3^.power := temp2^.power;
      ptEnd3^.koef := temp2^.koef;    
    end;    
    temp2 := temp2^.next;
  end;
end;

begin
  ptStart1 := ptEnd1;
  ptStart2 := ptEnd2;
  ptStart3 := ptEnd3;
end.